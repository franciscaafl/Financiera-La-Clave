{"ast":null,"code":"const calcularCuotaEnPesos = async (valorCredito, tasaMensual, plazo) => {\n  // Obtener la tasa de cambio UF a pesos desde la API\n  const apiUrl = \"https://api.sbif.cl/api-sbifv3/recursos_api/uf?apikey=e22b0c0739c3c80bd59442fc6c6be36954d524e9&formato=json\";\n  try {\n    const response = await fetch(apiUrl);\n    const data = await response.json();\n    console.log(\"Respuesta de la API:\", data);\n    if (data.UFs && data.UFs.length > 0) {\n      const ufToPesosExchangeRate = parseFloat(data.UFs[0].Valor.replace('.', '').replace(',', '.'));\n      console.log(\"Este es el valor de cambio en pesos: \", ufToPesosExchangeRate);\n      if (!isNaN(ufToPesosExchangeRate)) {\n        // Calcular la cuota en UF\n        const tasaMensualDecimal = tasaMensual / 100; // Convertir tasa a decimal\n        var cuotaEnUF = valorCredito / ((1 - Math.pow(1 + tasaMensualDecimal, -plazo)) / tasaMensualDecimal);\n        console.log('Cuota en UF:', cuotaEnUF);\n\n        // Convertir la cuota de UF a pesos\n        var cuotaEnPesos = cuotaEnUF * ufToPesosExchangeRate;\n        console.log('Cuota en Pesos:', cuotaEnPesos);\n\n        // Redondear la cuota a 2 decimales\n        cuotaEnPesos = parseFloat(cuotaEnPesos.toFixed(2));\n        return [cuotaEnPesos, cuotaEnUF];\n      } else {\n        console.error('Error: Tasa de cambio UF a Pesos no válida.');\n      }\n    } else {\n      console.error('Error al obtener la tasa de cambio desde la API.');\n      return null;\n    }\n  } catch (error) {\n    console.error('Error al realizar la solicitud a la API:', error);\n    return null;\n  }\n};\nexport { calcularCuotaEnPesos };","map":{"version":3,"names":["calcularCuotaEnPesos","valorCredito","tasaMensual","plazo","apiUrl","response","fetch","data","json","console","log","UFs","length","ufToPesosExchangeRate","parseFloat","Valor","replace","isNaN","tasaMensualDecimal","cuotaEnUF","Math","pow","cuotaEnPesos","toFixed","error"],"sources":["/Users/fran/www/Clave/client/src/calcularCuotaPesos.js"],"sourcesContent":["const calcularCuotaEnPesos = async (valorCredito, tasaMensual, plazo) => {\r\n    // Obtener la tasa de cambio UF a pesos desde la API\r\n    const apiUrl = \"https://api.sbif.cl/api-sbifv3/recursos_api/uf?apikey=e22b0c0739c3c80bd59442fc6c6be36954d524e9&formato=json\";\r\n\r\n    try {\r\n        const response = await fetch(apiUrl);\r\n        const data = await response.json();\r\n        console.log(\"Respuesta de la API:\", data);\r\n        \r\n        if (data.UFs && data.UFs.length > 0) {\r\n            const ufToPesosExchangeRate = parseFloat(data.UFs[0].Valor.replace('.', '').replace(',', '.'));\r\n            console.log(\"Este es el valor de cambio en pesos: \", ufToPesosExchangeRate);\r\n\r\n            if (!isNaN(ufToPesosExchangeRate)) {\r\n                // Calcular la cuota en UF\r\n                const tasaMensualDecimal = tasaMensual / 100; // Convertir tasa a decimal\r\n                var cuotaEnUF = valorCredito / ((1 - Math.pow(1 + tasaMensualDecimal, -plazo)) / tasaMensualDecimal);\r\n                console.log('Cuota en UF:', cuotaEnUF);\r\n\r\n                // Convertir la cuota de UF a pesos\r\n                var cuotaEnPesos = cuotaEnUF * ufToPesosExchangeRate;\r\n                console.log('Cuota en Pesos:', cuotaEnPesos);\r\n\r\n                // Redondear la cuota a 2 decimales\r\n                cuotaEnPesos = parseFloat(cuotaEnPesos.toFixed(2));\r\n\r\n                return [cuotaEnPesos, cuotaEnUF];\r\n            } else {\r\n                console.error('Error: Tasa de cambio UF a Pesos no válida.');\r\n            }\r\n        } else {\r\n            console.error('Error al obtener la tasa de cambio desde la API.');\r\n            return null;\r\n        }\r\n    } catch (error) {\r\n        console.error('Error al realizar la solicitud a la API:', error);\r\n        return null;\r\n    }\r\n};\r\n\r\nexport { calcularCuotaEnPesos };\r\n\r\n"],"mappings":"AAAA,MAAMA,oBAAoB,GAAG,MAAAA,CAAOC,YAAY,EAAEC,WAAW,EAAEC,KAAK,KAAK;EACrE;EACA,MAAMC,MAAM,GAAG,6GAA6G;EAE5H,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,MAAM,CAAC;IACpC,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClCC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEH,IAAI,CAAC;IAEzC,IAAIA,IAAI,CAACI,GAAG,IAAIJ,IAAI,CAACI,GAAG,CAACC,MAAM,GAAG,CAAC,EAAE;MACjC,MAAMC,qBAAqB,GAAGC,UAAU,CAACP,IAAI,CAACI,GAAG,CAAC,CAAC,CAAC,CAACI,KAAK,CAACC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;MAC9FP,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEG,qBAAqB,CAAC;MAE3E,IAAI,CAACI,KAAK,CAACJ,qBAAqB,CAAC,EAAE;QAC/B;QACA,MAAMK,kBAAkB,GAAGhB,WAAW,GAAG,GAAG,CAAC,CAAC;QAC9C,IAAIiB,SAAS,GAAGlB,YAAY,IAAI,CAAC,CAAC,GAAGmB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGH,kBAAkB,EAAE,CAACf,KAAK,CAAC,IAAIe,kBAAkB,CAAC;QACpGT,OAAO,CAACC,GAAG,CAAC,cAAc,EAAES,SAAS,CAAC;;QAEtC;QACA,IAAIG,YAAY,GAAGH,SAAS,GAAGN,qBAAqB;QACpDJ,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEY,YAAY,CAAC;;QAE5C;QACAA,YAAY,GAAGR,UAAU,CAACQ,YAAY,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;QAElD,OAAO,CAACD,YAAY,EAAEH,SAAS,CAAC;MACpC,CAAC,MAAM;QACHV,OAAO,CAACe,KAAK,CAAC,6CAA6C,CAAC;MAChE;IACJ,CAAC,MAAM;MACHf,OAAO,CAACe,KAAK,CAAC,kDAAkD,CAAC;MACjE,OAAO,IAAI;IACf;EACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;IACZf,OAAO,CAACe,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;IAChE,OAAO,IAAI;EACf;AACJ,CAAC;AAED,SAASxB,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}